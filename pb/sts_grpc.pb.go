// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: sts.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StsRpcClient is the client API for StsRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StsRpcClient interface {
	GetUserCosSts(ctx context.Context, in *GetUserCosStsReq, opts ...grpc.CallOption) (*GetUserCosStsResp, error)
}

type stsRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewStsRpcClient(cc grpc.ClientConnInterface) StsRpcClient {
	return &stsRpcClient{cc}
}

func (c *stsRpcClient) GetUserCosSts(ctx context.Context, in *GetUserCosStsReq, opts ...grpc.CallOption) (*GetUserCosStsResp, error) {
	out := new(GetUserCosStsResp)
	err := c.cc.Invoke(ctx, "/sts.sts_rpc/getUserCosSts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StsRpcServer is the server API for StsRpc service.
// All implementations must embed UnimplementedStsRpcServer
// for forward compatibility
type StsRpcServer interface {
	GetUserCosSts(context.Context, *GetUserCosStsReq) (*GetUserCosStsResp, error)
	mustEmbedUnimplementedStsRpcServer()
}

// UnimplementedStsRpcServer must be embedded to have forward compatible implementations.
type UnimplementedStsRpcServer struct {
}

func (UnimplementedStsRpcServer) GetUserCosSts(context.Context, *GetUserCosStsReq) (*GetUserCosStsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCosSts not implemented")
}
func (UnimplementedStsRpcServer) mustEmbedUnimplementedStsRpcServer() {}

// UnsafeStsRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StsRpcServer will
// result in compilation errors.
type UnsafeStsRpcServer interface {
	mustEmbedUnimplementedStsRpcServer()
}

func RegisterStsRpcServer(s grpc.ServiceRegistrar, srv StsRpcServer) {
	s.RegisterService(&StsRpc_ServiceDesc, srv)
}

func _StsRpc_GetUserCosSts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCosStsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StsRpcServer).GetUserCosSts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sts.sts_rpc/getUserCosSts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StsRpcServer).GetUserCosSts(ctx, req.(*GetUserCosStsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StsRpc_ServiceDesc is the grpc.ServiceDesc for StsRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StsRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sts.sts_rpc",
	HandlerType: (*StsRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUserCosSts",
			Handler:    _StsRpc_GetUserCosSts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sts.proto",
}
